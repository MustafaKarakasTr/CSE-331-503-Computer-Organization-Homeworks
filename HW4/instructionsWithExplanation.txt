0000001010011000 R3 = R1 & R2, R1 = 1010, R2 = 10010, R3 will become 10
1001001011000110 sw R3,R1(6), Mem[16] = 32'b10
1000001101000110 lw R5,R1(6), R5 = 32'b10
0101011101000001 // beq r3,r5,1, next command will not work
0001101111010001 addi R7,R5,10001(in binary) r7 will become 10 + 10001 = 10011

0101011100000001 // beq r3,r4,1, next command will  work r3!=r4
0001101001010001 addi R1,R5,10001(in binary) r1 will become 10 + 10001 = 10011

0110011100000001 //bneq r3, r4,1  next command will not work r3!=r4
0001_101_001_011101 addi R1,R5,11101(in binary) r1 will not become 10 + 11101 = 11111, it will stay same
0110011101000001 //bneq r3, r5,1  next command will  work r3==r5
0001_101_110_000001 addi R6,R5,11101(in binary) r6 will become 10 + 000001 = 11, 

/*

registers:
0:  00000000000000000000000000000000 
1:  00000000000000000000000000010011 
2:  00000000000000000000000000010010 
3:  00000000000000000000000000000010 
4:  00000000000000000000000000000100 
5:  00000000000000000000000000000010 
6:  00000000000000000000000000000011 
7:  00000000000000000000000001000111 

*/

0000_110_010_100_000 R4 = R6 & R2, R6 = 11, R2 = 10010, R4 will become 10
0000_100_010_011_001 R3 = r4 + r2, r4 = 10, r2 =10010, r3 will become 10100
0000_100_011_001_001 R1 = r4 + r3, r4 = 10, r3 =10100, r1 will become 10110
/*

registers:
0:  00000000000000000000000000000000
1:  00000000000000000000000000010110
2:  00000000000000000000000000010010
3:  00000000000000000000000000010100
4:  00000000000000000000000000000010
5:  00000000000000000000000000000010
6:  00000000000000000000000000000011
7:  00000000000000000000000001000111

*/
sub:
0000_101_100_010_010 => R2 = R5 - R4, R2 will become 0
0000_111_100_011_010 => R3 = R7 - R4, R3 will become 1000111 - 10 = 1000101
/*
registers:
    00000000000000000000000000000000
    00000000000000000000000000010110
R2: 00000000000000000000000000000000
R3: 00000000000000000000000001000101
R4: 00000000000000000000000000000010
R5: 00000000000000000000000000000010
    00000000000000000000000000000011
R7: 00000000000000000000000001000111
*/
xor:
0000_111_011_010_011 // r2 = r7 xor r3 => r2 will be 10
0000_111_001_110_011 // r6 = r7 xor r1 => r6 will be 1010001
/*
registers:
    00000000000000000000000000000000
    00000000000000000000000000010110
R2: 00000000000000000000000000000010
    00000000000000000000000001000101
    00000000000000000000000000000010
    00000000000000000000000000000010
R6: 00000000000000000000000001010001
    00000000000000000000000001000111
*/
//nor
0000_111_011_100_100 // r4 = r7 (1000111)nor r3(1000101) => r4 will be 11111111111111111111111110111000
0000_111_001_101_100 // r5 = r7 (1000111)nor r1(0010110)=> r6 will be  11111111111111111111111110101000
/*
registers:
    00000000000000000000000000000000
    00000000000000000000000000010110
    00000000000000000000000000000010
    00000000000000000000000001000101
r4: 11111111111111111111111110111000
r5: 11111111111111111111111110101000
    00000000000000000000000001010001
    00000000000000000000000001000111
*/
0000_001_110_010_101 // r2 = r1 (10110)nor r6(1010001) => r2 will be 1010111
0000_001_011_111_101 // r7 = r1 (10110)nor r3(1000101)=> r7 will be  1010111 
/*
registers:

00000000000000000000000000000000
00000000000000000000000000010110
r2: 00000000000000000000000001010111
00000000000000000000000001000101
11111111111111111111111110111000
11111111111111111111111110101000
00000000000000000000000001010001
r7:00000000000000000000000001010111

*/
0010_101_001_111111 andi R1,R5,111111(in binary) r1 will become 101000
0010_001_011_110111 andi R3,R1,110111(in binary) r3 will become 100000
/*
registers:
00000000000000000000000000000000
r1: 00000000000000000000000000101000
00000000000000000000000001010111
r3: 00000000000000000000000000100000
11111111111111111111111110111000
11111111111111111111111110101000
00000000000000000000000001010001
00000000000000000000000001010111
*/
0011_101_001_111000 ori R1,R5,111000(in binary) r1 will become 11111111111111111111111110111000
0011_001_011_101010 ori R3,R1,101010(in binary) r3 will become 11111111111111111111111110111010
/*
registers:
00000000000000000000000000000000
r1: 11111111111111111111111110111000
00000000000000000000000001010111
r3: 11111111111111111111111110111010
11111111111111111111111110111000
11111111111111111111111110101000
00000000000000000000000001010001
00000000000000000000000001010111
*/
0100_101_001_111000 nori R1,R5(11111111111111111111111110101000),111000(in binary) r1 will become 1000111
0100_001_011_100010 nori R3,R1(1000111),100010(in binary) r3 will become 11111111111111111111111110011000
/*
registers:
00000000000000000000000000000000
00000000000000000000000001000111
00000000000000000000000001010111
11111111111111111111111110011000
11111111111111111111111110111000
11111111111111111111111110101000
00000000000000000000000001010001
00000000000000000000000001010111

*/
0111_001_100_111000 slti R4,R1(1000111),111000(in binary) r4 will become 0 
0111_100_101_100010 slti R5,R4(0),100010(in binary) r5 will become 1
/*
registers:

00000000000000000000000000000000
00000000000000000000000001000111
00000000000000000000000001010111
11111111111111111111111110011000
r4: 00000000000000000000000000000000
r5: 00000000000000000000000000000001
00000000000000000000000001010001
00000000000000000000000001010111
*/
1001_101_111_000111 sw R7,R5(7), Mem[7 + 1(r5 = 5)] = Mem[8] = 1010111


/*
Memory:
[0] = 00000000000000000000000000000000
[1] = 00000000000000000000000000000001
[2] = 00000000000000000000000000000010
[3] = 00000000000000000000000000000011
[4] = 00000000000000000000000000000100
[5] = 00000000000000000000000000000101
[6] = 00000000000000000000000000000110
[7] = 00000000000000000000000000000001
[8] = 00000000000000000000000001010111

*/
1000_101_001_000111 lw R1,R5(7), R1 = 1010111
/*
registers:

00000000000000000000000000000000
R1: 00000000000000000000000001010111
00000000000000000000000001010111
11111111111111111111111110011000
00000000000000000000000000000000
00000000000000000000000000000001
00000000000000000000000001010001
00000000000000000000000001010111
*/

//ORI
0011_011_001_111111 // ORI R1, R3, 111111 in binary
/*
R3 = 11111111111111111111111110011000
Imm= 00000000000000000000000000111111
ORI  ----------------------------------
R1 = 11111111111111111111111110111111
*/
//ORI but trying to change R0
0011_011_000_111111 // ORI R0, R3, 111111 in binary
/*
R3 = 11111111111111111111111110011000
Imm= 00000000000000000000000000111111
ORI  ----------------------------------
R0 != 11111111111111111111111110111111, R0 will stay as 0 because, R0 is always zero.
*/

/*
Registers:
R0:     00000000000000000000000000000000
R1:     11111111111111111111111110111111
R2:     00000000000000000000000001010111
R3:     11111111111111111111111110011000
R4:     00000000000000000000000000000000
R5:     00000000000000000000000000000001
R6:     00000000000000000000000001010001
R7:     00000000000000000000000001010111

*/